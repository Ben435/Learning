AWSTemplateFormatVersion : '2010-09-09'
Description: ECS Service Experiment

Resources:
  # VPC + Network Stuff
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/20
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join
                    - "-"
                    - - !Ref AWS::StackName
                      - "VPC"

  SubnetPublicA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "ap-southeast-2a"
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicA

  SubnetPublicB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "ap-southeast-2b"
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicB
  
  VPCIGW:
    Type: AWS::EC2::InternetGateway
  
  VPCIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref VPCIGW
      VpcId: !Ref VPC
  
  VPCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  
  AssociateRouteTableWithPublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPCRouteTable
      SubnetId: !Ref SubnetPublicA
  
  AssociateRouteTableWithPublicB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPCRouteTable
      SubnetId: !Ref SubnetPublicB
  
  PublicIGWRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPCRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPCIGW

  ECSAgentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join
                    - "-"
                    - - !Ref AWS::StackName
                      - "Agent"
                      - "SG"
      GroupDescription: For ECS Agents in this project
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: SSH
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          Description: HTTP over ephemerals
          IpProtocol: tcp
          FromPort: 49153
          ToPort: 65535
        - CidrIp: 0.0.0.0/0
          Description: HTTP over other ephemerals
          IpProtocol: tcp
          FromPort: 32768
          ToPort: 61000

  ECSLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join
                    - "-"
                    - - !Ref AWS::StackName
                      - "ELB"
                      - "SG"
      GroupDescription: For ELB pointing at the containers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: HTTP
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

  PublicAcl: 
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
  
  AclEntryAllowSsh:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicAcl
      CidrBlock: 0.0.0.0/0
      PortRange: 
        From: 22
        To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100

  AclEntryAllowHttpOverEphemerals:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicAcl
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 49153
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 200
  
  AclEntryAllowHttpOverOtherEphemerals:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicAcl
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 32768
        To: 61000
      Protocol: 6
      RuleAction: allow
      RuleNumber: 300

  # AutoScale + Load Balancer Stuff
  AutoScaleLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Join
                            - "-"
                            - - !Ref AWS::StackName
                              - "ECSAgent"
      LaunchTemplateData: 
        InstanceType: t2.micro
        IamInstanceProfile: 
          Arn: arn:aws:iam::307795561406:instance-profile/ECS-Experiment
        ImageId: ami-07610e278b1ddf331    # ECS Agent Image from AWS community marketplace
        UserData: <%= userDataScript %>
        KeyName: Wordpress-Ec2-Web
        SecurityGroupIds:
          - !Ref ECSAgentSecurityGroup
  
  AutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Join
                              - "-"
                              - - !Ref AWS::StackName
                                - "Agents"
      AvailabilityZones: 
        - ap-southeast-2a
        - ap-southeast-2b
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 4
      LaunchTemplate: 
        LaunchTemplateId: !Ref AutoScaleLaunchTemplate
        Version: !GetAtt AutoScaleLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier: 
        - !Ref SubnetPublicA
        - !Ref SubnetPublicB
  
  ECSContainersTargetGroup:
   Type: AWS::ElasticLoadBalancingV2::TargetGroup
   Properties:
      Name: !Join
              - "-"
              - - !Ref AWS::StackName
                - "Containers"
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      VpcId: !Ref VPC
  
  ECSLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join
              - "-"
              - - !Ref AWS::StackName
                - "WebApp"
                - "ELB"
      Scheme: internet-facing
      Subnets:
        - !Ref SubnetPublicA
        - !Ref SubnetPublicB
      SecurityGroups: 
        - !Ref ECSLoadBalancerSecurityGroup
    
  ECSLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ECSLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref ECSContainersTargetGroup
  
  DNSRouteGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: bens-stuff.net.
      Comment: !Join
                  - " "
                  - - "For"
                    - !Ref AWS::StackName
                    - "(see cloud formations)"
      RecordSets:
        - Name: !Join 
                  - "." 
                  - - !Ref AWS::StackName
                    - "bens-stuff.net"
          Type: A
          AliasTarget: 
            DNSName: !GetAtt ECSLoadBalancer.DNSName
            EvaluateTargetHealth: false
            HostedZoneId: !GetAtt ECSLoadBalancer.CanonicalHostedZoneID

  # ECS Cluster + Services
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  WebService:
    Type: AWS::ECS::Service
    DependsOn: ECSLoadBalancerListener  # Target group must have attached load balancer. Weird constraint/validation.
    Properties:
      ServiceName: !Join
                    - "-"
                    - - !Ref AWS::StackName
                      - "Website"
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref WebAppTask
      DesiredCount: 1
      Role: arn:aws:iam::307795561406:role/EcsContainerServiceRole
      LoadBalancers: 
        - TargetGroupArn: !Ref ECSContainersTargetGroup
          ContainerPort: 80
          ContainerName: web-app
  
  WebAppTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: web-app
          Image: nginx
          PortMappings:
            - ContainerPort: 80
              HostPort: 0
      Family: web-app
      Memory: 50
  
  ECSContainerScaling:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Join
                    - "/"
                    - - "service"
                      - !Ref ECSCluster
                      - !GetAtt WebService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: arn:aws:iam::307795561406:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService

